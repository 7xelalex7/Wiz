install.packages(c("curl", "knitr", "modelr", "purrr", "rlang"))
install.packages("googlesheets")
#Package used to display Data Table
library(DT)
#Package used to make dashabord easily in shiny
library(flexdashboard)
#Package used to generate forecast of future sales
library(forecast)
#Package to read data from Google Sheets
library(googlesheets)
#Package to do nice chart visualization
library(highcharter)
#Package used for data management
library(lubridate)
#Package to get Dplyr universe
library(tidyverse)
#Package used to do treemap layout
library(treemap)
#package used to get easy to read color palette
library(viridisLite)
#Package usef for the rollapply and nas (omit, locf) functions
library(zoo)
# Function to adapt R to local time - Code ran in the US and France
lct <- Sys.getlocale("LC_TIME"); Sys.setlocale("LC_TIME", "C")
# set working directory
setwd('C:/Users/Alexandre/Documents/Folder_Git_Alexandre/Wiz/Sales_Dash')
# Importing local CSV File
PW_Calendar = read.csv('Date_Sales.csv', stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y")) %>%
mutate(Fiscal_Month_Start = as.Date(Fiscal_Month_Start, format = "%m/%d/%Y")) %>%
mutate(Fiscal_Week_Start = as.Date(Fiscal_Week_Start, format = "%m/%d/%Y") )
PW_Data_gs = read.csv('Data_Sales_Dummy.csv', stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
# Cleaning the data
PW_Data = PW_Data_gs %>%
# Keep only fully populated rows
filter(complete.cases(.)) %>%
# Convert to date format
mutate(Date = as.Date(Date, format = "%d-%b-%Y")) %>%
# Give a two day buffer to populate the data
filter(Date < Sys.Date() + 2) %>%
# One row per sales
mutate(Count = 1) %>%
# Keep only the specific column
select(Date, Collection, Line, Color, Eyewear, Gender, Age, Count) %>%
# Add the date data to the main data
left_join(PW_Calendar, by = c("Date"))
# Convert the daily sales into Monthly sales / Per Line
PW_Sales_Month_Line = PW_Data %>%
group_by(Collection, Line, Fiscal_Month_Start) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Get the Max date for the Monthly sales - Keep onlyh finished months
Max_Date = max(PW_Sales_Month_Line$Fiscal_Month_Start) - months(1)
# Convert the daily sales into Monthly sales / Per Eyewear (Solar, Optical, frame, solar optical)
PW_Sales_Month_Eyewear = PW_Data %>%
group_by(Eyewear, Fiscal_Month_Start) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Get the first week of sales for every line
PW_First_Week = PW_Data %>%
group_by(Collection, Line) %>%
summarise(First_Week = min(Fiscal_Week_Start)) %>%
ungroup()
# Convert the daily sales into Weekly sales / Per Line
PW_Sales_Week = PW_Data %>%
group_by(Collection, Line, Fiscal_Week_Start) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Convert the daily sales into Weekly sales / Per Eyewear
PW_Data_Eyewear = PW_Data %>%
group_by(Collection, Line, Eyewear) %>%
summarise(Count = sum(Count)) %>%
ungroup()
PW_Data_Color = PW_Data %>%
group_by(Collection, Line, Color) %>%
summarise(Count = sum(Count)) %>%
ungroup()
# Aggregate Sales based on Gender of Customers
PW_Data_Gender = PW_Data %>%
group_by(Collection, Line, Gender) %>%
summarise(Count = sum(Count)) %>%
ungroup()
# Aggregate Sales based on Gender of Customers
PW_Data_Age = PW_Data %>%
mutate(Age = factor(Age, levels = c("00-15", "15-30", "30-45", "45-60", "60 +", "Online", "SAV"))) %>%
group_by(Collection, Line, Age) %>%
summarise(Count = sum(Count)) %>%
ungroup()
func_get_season_group_month = function(data, type, units, date)
{
#Standardize Seasonality: times, level and Units
data = data %>%
rename_(MONTH_YEAR = date) %>%
rename_(TYPE = type) %>%
rename_(SALES_UNITS = units)
# Uniq Levels
uniq_level = data %>%
distinct(TYPE)
Season_Calc_All = NULL
# Loop to get the seasonality for each of these levels
for (itr in 1:nrow(uniq_level))
{
# Get the Unique Key
uniq_itr_key = uniq_level %>%
filter(row_number() == itr)
# Filter the data
data_filter = data %>%
filter(TYPE == uniq_itr_key$TYPE, MONTH_YEAR < max(MONTH_YEAR))
# At least 12 points to get the seasonality
if (nrow(data_filter) < 12) next
# At least 100 units over the past 6 months - get significant results
if (sum(tail(data_filter,6)$SALES_UNITS) < 100) next
# Get Seasonal Factors
data_filter_1 = data_filter %>%
group_by(TYPE) %>%
# Populate Missing Months
complete(MONTH_YEAR = seq.Date(min(MONTH_YEAR), max(MONTH_YEAR), by = "month"),
fill = list(SALES_UNITS = 0)) %>%
# Get Month numeric - Remove 4-4-5 rule
mutate(MONTH_NUM = month(MONTH_YEAR)) %>%
mutate(WEEK_COUNT = ifelse(MONTH_NUM %in% c(3,6,9,12), 5, 4)) %>%
mutate(SALES_UNITS_NORM = SALES_UNITS / WEEK_COUNT * 4 ) %>%
# Rolling Centered moving average
mutate(SALES_UNITS_ROLL =
rollapply(SALES_UNITS_NORM, 12, mean, align = "center", partial = TRUE)) %>%
# Remove beginning and End - Now, not a lot of history so we allowed partial Roll Apply
filter(complete.cases(.)) %>%
# Get Seasonal factors
mutate(SALES_UNITS_MEAN = SALES_UNITS_NORM / SALES_UNITS_ROLL)
# Average, group and normalize the results
Season_Calc = data_filter_1 %>%
group_by(TYPE, MONTH_NUM) %>%
summarise(SEASON = mean(SALES_UNITS_MEAN)) %>%
ungroup() %>%
mutate(SEASON = SEASON / sum(SEASON) * 12)
Season_Calc_All = rbind(Season_Calc_All, Season_Calc)
}
return(Season_Calc_All)
}
Current_Month = floor_date(today(), 'month')
# Sales this Month so Far
This_Month = PW_Data %>%
filter(Fiscal_Month_Start == Current_Month) %>%
group_by(Fiscal_Month_Start) %>%
summarise(Count = sum(Count)) %>%
ungroup() %>%
mutate(Type = "Current Month")
# Get the previous month
Previous_Month = Current_Month - months(1)
# Sales Last Month
Last_Month = PW_Data %>%
filter(Fiscal_Month_Start == Previous_Month) %>%
group_by(Fiscal_Month_Start) %>%
summarise(Count = sum(Count)) %>%
ungroup() %>%
mutate(Type = "Last Month")
# Get the previous Year Month
Previous_Year = Current_Month - months(12)
# Sales last Year Month
Last_Year_Month = PW_Data %>%
filter(Fiscal_Month_Start == Previous_Year) %>%
group_by(Fiscal_Month_Start) %>%
summarise(Count = sum(Count)) %>%
ungroup() %>%
mutate(Type = "Last Year")
# Month with Highest Sales
Max_Month = PW_Data %>%
group_by(Fiscal_Month_Start) %>%
summarise(Count = sum(Count)) %>%
ungroup() %>%
filter(Count == max(Count)) %>%
mutate(Type = "Max Month")
# Saving the data into one data frame
Month_Data = rbind(This_Month, Last_Month, Last_Year_Month, Max_Month) %>%
mutate(Type = factor(Type, levels = c("Current Month", "Last Year", "Last Month", "Max Month"))) %>%
select(Type,  Fiscal_Month_Start, Count)
# Get the Current Week
Current_Week = floor_date(today(), 'week') + days(1)
# Sales this Week so Far
This_Week = PW_Data %>%
filter(Fiscal_Week_Start == Current_Week) %>%
group_by(Fiscal_Week_Start) %>%
summarise(Count = sum(Count)) %>%
ungroup() %>%
mutate(Type = "Current Week")
# Get the previous week
Previous_Week = Current_Week - weeks(1)
# Sales Last Week
Last_Week = PW_Data %>%
filter(Fiscal_Week_Start == Previous_Week) %>%
group_by(Fiscal_Week_Start) %>%
summarise(Count = sum(Count)) %>%
ungroup() %>%
mutate(Type = "Last Week")
# Get the previous Year Month Week
Current_Week_Number = PW_Calendar %>%
filter(Fiscal_Week_Start == Current_Week) %>%
head(1) %>%
select((Week_Number))
Previous_Year_Week = PW_Calendar %>%
filter(Week_Number == Current_Week_Number$Week_Number) %>%
group_by(Fiscal_Week_Start) %>%
summarise(Week_Number = mean(Week_Number)) %>%
ungroup() %>%
arrange(Fiscal_Week_Start) %>%
filter(Fiscal_Week_Start < Current_Week) %>%
tail(1)
# Sales last Year Month Week
Previous_Year_Week = Previous_Year_Week$Fiscal_Week_Start
Last_Year_Week = PW_Data %>%
filter(Fiscal_Week_Start == Previous_Year_Week) %>%
group_by(Fiscal_Week_Start) %>%
summarise(Count = sum(Count)) %>%
ungroup() %>%
mutate(Type = "Last Year")
# Week with Highest Sales
Max_Week = PW_Data %>%
group_by(Fiscal_Week_Start) %>%
summarise(Count = sum(Count)) %>%
ungroup() %>%
filter(Count == max(Count)) %>%
mutate(Type = "Max Week")
# Saving the data into one data frame
Week_Data = rbind(This_Week, Last_Week, Last_Year_Week, Max_Week) %>%
mutate(Type = factor(Type, levels = c("Current Week", "Last Year", "Last Week", "Max Week"))) %>%
select(Type, Fiscal_Week_Start, Count)
# Get the Current Week
Current_Week = floor_date(today(), 'week') + days(1)
# Sales this Week so Far
This_Week = PW_Data %>%
filter(Fiscal_Week_Start == Current_Week) %>%
group_by(Fiscal_Week_Start) %>%
summarise(Count = sum(Count)) %>%
ungroup() %>%
mutate(Type = "Current Week")
Previous_Week = Current_Week - weeks(1)
# Sales Last Week
Last_Week = PW_Data %>%
filter(Fiscal_Week_Start == Previous_Week) %>%
group_by(Fiscal_Week_Start) %>%
summarise(Count = sum(Count)) %>%
ungroup() %>%
mutate(Type = "Last Week")
# Get the previous Year Month Week
Current_Week_Number = PW_Calendar %>%
filter(Fiscal_Week_Start == Current_Week) %>%
head(1) %>%
select((Week_Number))
Previous_Year_Week = PW_Calendar %>%
filter(Week_Number == Current_Week_Number$Week_Number) %>%
group_by(Fiscal_Week_Start) %>%
summarise(Week_Number = mean(Week_Number)) %>%
ungroup() %>%
arrange(Fiscal_Week_Start) %>%
filter(Fiscal_Week_Start < Current_Week) %>%
tail(1)
head(PW_Calendar)
# Get the previous Year Month Week
Current_Week_Number = PW_Calendar %>%
filter(Fiscal_Week_Start == Current_Week) %>%
head(1) %>%
dplyr::select(Week_Number)
# Cleaning the data
Sales_Data = Sales_Data_gs %>%
# Keep only fully populated rows
filter(complete.cases(.)) %>%
# Convert to date format
mutate(Date = as.Date(Date, format = "%d-%b-%Y")) %>%
# Give a two day buffer to populate the data
filter(Date < Sys.Date() + 2) %>%
# One row per sales
mutate(Count = 1) %>%
# Keep only the specific column
dplyr::select(Date, Collection, Line, Color, Eyewear, Gender, Age, Count) %>%
# Add the date data to the main data
left_join(Sales_Calendar, by = c("Date"))
# Convert the daily sales into Monthly sales / Per Line
Sales_Month_Line = Sales_Data %>%
group_by(Collection, Line, Fiscal_Month_Start) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Get the Max date for the Monthly sales - Keep onlyh finished months
Max_Date = max(Sales_Month_Line$Fiscal_Month_Start) - months(1)
# Convert the daily sales into Monthly sales / Per Eyewear (Solar, Optical, frame, solar optical)
Sales_Month_Eyewear = Sales_Data %>%
group_by(Eyewear, Fiscal_Month_Start) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Get the first week of sales for every line
Sales_First_Week = Sales_Data %>%
group_by(Collection, Line) %>%
summarise(First_Week = min(Fiscal_Week_Start)) %>%
ungroup()
# Convert the daily sales into Weekly sales / Per Line
Sales_Week = Sales_Data %>%
group_by(Collection, Line, Fiscal_Week_Start) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Convert the daily sales into Weekly sales / Per Eyewear
Sales_Data_Eyewear = Sales_Data %>%
group_by(Collection, Line, Eyewear) %>%
summarise(Count = sum(Count)) %>%
ungroup()
Sales_Data_Color = Sales_Data %>%
group_by(Collection, Line, Color) %>%
summarise(Count = sum(Count)) %>%
ungroup()
# Aggregate Sales based on Gender of Customers
Sales_Data_Gender = Sales_Data %>%
group_by(Collection, Line, Gender) %>%
summarise(Count = sum(Count)) %>%
ungroup()
# Aggregate Sales based on Gender of Customers
Sales_Data_Age = Sales_Data %>%
mutate(Age = factor(Age, levels = c("00-15", "15-30", "30-45", "45-60", "60 +", "Online", "SAV"))) %>%
group_by(Collection, Line, Age) %>%
summarise(Count = sum(Count)) %>%
ungroup()
# set working directory
setwd('C:/Users/Alexandre/Documents/Folder_Git_Alexandre/Wiz/Sales_Dash')
# Importing local CSV File
Sales_Calendar = read.csv('Date_Sales.csv', stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y")) %>%
mutate(Fiscal_Month_Start = as.Date(Fiscal_Month_Start, format = "%m/%d/%Y")) %>%
mutate(Fiscal_Week_Start = as.Date(Fiscal_Week_Start, format = "%m/%d/%Y") )
Sales_Data_gs = read.csv('Data_Sales_Dummy.csv', stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
# Cleaning the data
Sales_Data = Sales_Data_gs %>%
# Keep only fully populated rows
filter(complete.cases(.)) %>%
# Convert to date format
mutate(Date = as.Date(Date, format = "%d-%b-%Y")) %>%
# Give a two day buffer to populate the data
filter(Date < Sys.Date() + 2) %>%
# One row per sales
mutate(Count = 1) %>%
# Keep only the specific column
dplyr::select(Date, Collection, Line, Color, Eyewear, Gender, Age, Count) %>%
# Add the date data to the main data
left_join(Sales_Calendar, by = c("Date"))
# Convert the daily sales into Monthly sales / Per Line
Sales_Month_Line = Sales_Data %>%
group_by(Collection, Line, Fiscal_Month_Start) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Get the Max date for the Monthly sales - Keep onlyh finished months
Max_Date = max(Sales_Month_Line$Fiscal_Month_Start) - months(1)
# Convert the daily sales into Monthly sales / Per Eyewear (Solar, Optical, frame, solar optical)
Sales_Month_Eyewear = Sales_Data %>%
group_by(Eyewear, Fiscal_Month_Start) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Get the first week of sales for every line
Sales_First_Week = Sales_Data %>%
group_by(Collection, Line) %>%
summarise(First_Week = min(Fiscal_Week_Start)) %>%
ungroup()
# Convert the daily sales into Weekly sales / Per Line
Sales_Week = Sales_Data %>%
group_by(Collection, Line, Fiscal_Week_Start) %>%
summarize(Count = sum(Count)) %>%
ungroup()
# Convert the daily sales into Weekly sales / Per Eyewear
Sales_Data_Eyewear = Sales_Data %>%
group_by(Collection, Line, Eyewear) %>%
summarise(Count = sum(Count)) %>%
ungroup()
Sales_Data_Color = Sales_Data %>%
group_by(Collection, Line, Color) %>%
summarise(Count = sum(Count)) %>%
ungroup()
# Aggregate Sales based on Gender of Customers
Sales_Data_Gender = Sales_Data %>%
group_by(Collection, Line, Gender) %>%
summarise(Count = sum(Count)) %>%
ungroup()
# Aggregate Sales based on Gender of Customers
Sales_Data_Age = Sales_Data %>%
mutate(Age = factor(Age, levels = c("00-15", "15-30", "30-45", "45-60", "60 +", "Online", "SAV"))) %>%
group_by(Collection, Line, Age) %>%
summarise(Count = sum(Count)) %>%
ungroup()
